package com.tristian.stacklanguage;

import com.tristian.stacklanguage.commands.*;
import com.tristian.stacklanguage.var.*;
import com.tristian.stacklanguage.commands.math.*;
import com.tristian.stacklanguage.commands.stdout.*;
import com.tristian.stacklanguage.commands.logic.*;
import com.tristian.stacklanguage.commands.section.*;
import com.tristian.stacklanguage.commands.register.*;
import com.tristian.stacklanguage.section.*;
import com.tristian.stacklanguage.label.*;
import com.tristian.stacklanguage.register.*;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.*;

public class Main {

    private List<String> commands = new ArrayList<>();
    private static Main instance;

    private LStack LStack;

    public static void main(String[] args) {
        new Main().load();
    }
    public void load() {



        instance = this;
        new Accumulator();
        new ExtraAccumulator();
        this.LStack = LStack.setUpStack();








        if (!SectionStorage.sections.isEmpty()) {
        SectionStorage.sections.forEach(Section::execute);
        }








        init();
    }

    private void init() {

        Iterator<String> iterator = commands.iterator();
        String next;
        while (iterator.hasNext() && !(next = iterator.next()).equalsIgnoreCase("exit()")) {
            if (Variable.VariableParser.tryAddVariable(next) != null) {
                continue;
            }

            CommandParser.runCommand(next);

        }
    }

    public static Main getInstance() {
        return instance;
    }

    public LStack getLStack() {
        return LStack;
    }
}
